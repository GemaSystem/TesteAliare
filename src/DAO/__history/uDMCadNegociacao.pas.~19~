unit uDMCadNegociacao;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Datasnap.DBClient, Data.DB,
  Data.SqlExpr, Datasnap.Provider,Vcl.Grids,
  Winapi.Windows, Winapi.Messages, System.Variants, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons,
  Vcl.ComCtrls, Vcl.ExtCtrls, Vcl.DBGrids, Vcl.DBCtrls, uCadNegociacao;

type
  TdtmCadNegociacao = class(TDataModule)
    dspPesquisar: TDataSetProvider;
    sqlPesquisar: TSQLDataSet;
    cdsPesquisar: TClientDataSet;
    dspProdutor: TDataSetProvider;
    sqlProdutor: TSQLDataSet;
    cdsProdutor: TClientDataSet;
    dspLimiteCredito: TDataSetProvider;
    sqlLimteCredito: TSQLDataSet;
    cdsLimiteCredito: TClientDataSet;
  private
    { Private declarations }
  public
    { Public declarations }
    function GerarID:Integer;
    function PesquisarSaldoDiponivel(sLimiteCredito_ID: Integer):Double;
    procedure CarregarComboboxProdutor(cbbProdutor: TCombobox);
    procedure CarregarComboboxLimiteCredito(cbbLimiteCredito: TCombobox; sProdutor_ID : Integer);
    function Inserir(oCadNegociacao : TCadNegociacao; out sErro : String):Integer;
    function Alterar(oCadNegociacao : TCadNegociacao; out sErro : String):Boolean;
    function Excluir(iCodigo : Integer;sTabela :String; out sErro : String):Boolean;
  end;

var
  dtmCadNegociacao: TdtmCadNegociacao;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses DMConexao;


{$R *.dfm}

{ TdtmCadNegociacao }

function TdtmCadNegociacao.Alterar(oCadNegociacao: TCadNegociacao;
  out sErro: String): Boolean;
var
  sqlAlterar : TSQLDataset;
begin
  sqlAlterar := TSQLDataset.Create(nil);
  try
    sqlAlterar.SQLConnection := dtmConexao.SqlConexao;
    sqlAlterar.CommandText := ' UPDATE NEGOCIACAO '+
                              ' SET DATA_INICIO = :DATA_INICIO, '+
                              ' SITUACAO = :SITUACAO, '+
                              ' VALOR_TOTAL_CONTRATO = :VALOR_TOTAL_CONTRATO '+
                              ' WHERE NEGOCIACAO_ID = :NEGOCIACAO_ID ';

    sqlAlterar.Params[0].AsDateTime := oCadNegociacao.Data_Inicio;
    sqlAlterar.Params[1].AsString := oCadNegociacao.Situacao;
    sqlAlterar.Params[2].AsFloat := oCadNegociacao.ValorTotalContrato;
    sqlAlterar.Params[3].AsInteger := oCadNegociacao.ID;

    try
      sqlAlterar.ExecSQL();
      Result := true;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao alterar produtor: '+e.Message;
        Result := false;
      end;
    end;
  finally
    FreeAndNil(sqlAlterar);
  end;

end;

procedure TdtmCadNegociacao.CarregarComboboxLimiteCredito(
  cbbLimiteCredito: TCombobox; sProdutor_ID : Integer);
begin
    try
    cdsPesquisar.Active := False;

    cdsPesquisar.Params[0].AsInteger := sProdutor_ID;

    cdsPesquisar.Open;
    cdsPesquisar.DisableConstraints;

    //
    cdsPesquisar.First;

    cbbLimiteCredito.Clear;

    while not cdsPesquisar.Eof do
    begin
      cbbLimiteCredito.Items.AddObject( Trim(cdsPesquisar.FieldByName('DISTRIBUIDOR').AsString),
       tObject(cdsPesquisar.FieldByName('LIMITECREDITO_ID').asInteger) );
      cdsPesquisar.Next;
    end;
  finally
    cdsPesquisar.EnableConstraints;
    cdsPesquisar.Close;
  end;
end;

procedure TdtmCadNegociacao.CarregarComboboxProdutor(cbbProdutor: TCombobox);
begin
    try
    cdsProdutor.Active := False;

    cdsProdutor.Params[0].AsString := '%';

    cdsProdutor.Open;
    cdsProdutor.DisableConstraints;

    //
    cdsProdutor.First;

    cbbProdutor.Clear;

    while not cdsProdutor.Eof do
    begin
      cbbProdutor.Items.AddObject( Trim(cdsProdutor.FieldByName('NOME').AsString),
       tObject(cdsProdutor.FieldByName('PRODUTOR_ID').asInteger) );
      cdsProdutor.Next;
    end;
  finally
    cdsProdutor.EnableConstraints;
    cdsProdutor.Close;
  end;

end;

function TdtmCadNegociacao.Excluir(iCodigo: Integer;sTabela :String;
  out sErro: String): Boolean;
var
  sqlDeletar : TSQLDataset;
begin
  sqlDeletar := TSQLDataset.Create(nil);
  try
    sqlDeletar.SQLConnection := dtmConexao.SqlConexao;
    sqlDeletar.CommandText := ' DELETE FROM '+sTabela+' WHERE NEGOCIACAO_ID = :NEGOCIACAO_ID ';

    sqlDeletar.Params[0].AsInteger := iCodigo;

    try
      sqlDeletar.ExecSQL();
      Result := true;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao excluir '+sTabela+': '+e.Message;
        Result := false;
      end;
    end;
  finally
    FreeAndNil(sqlDeletar);
  end;
end;

function TdtmCadNegociacao.GerarID: Integer;
var
  sqlSeq : TSQLDataset;
begin
  sqlSeq := TSQLDataset.Create(nil);
  try
    sqlSeq.SQLConnection := dtmConexao.SqlConexao;
    sqlSeq.CommandText := 'SELECT GEN_ID(GEN_NEGOCI, 1) FROM RDB$DATABASE;';
    sqlSeq.Open;
    Result := sqlSeq.FieldByName('GEN_ID').AsInteger;
  finally
    FreeAndNil(sqlSeq);
  end;

end;

function TdtmCadNegociacao.Inserir(oCadNegociacao: TCadNegociacao;
  out sErro: String): Integer;
var
  sqlInsert : TSQLDataset;
  vID: Integer;
begin
  sqlInsert := TSQLDataset.Create(nil);
  try
    vID := GerarID;
    sqlInsert.SQLConnection := dtmConexao.SqlConexao;
    sqlInsert.CommandText := ' INSERT INTO NEGOCIACAO( '+
                             '                      NEGOCIACAO_ID, '+
                             '                      SITUACAO, '+
                             '                      CODIGO_CONTRATO, '+
                             '                      PRODUTOR_ID, '+
                             '                      LIMITECREDITO_ID)values( '+
                             '                      :NEGOCIACAO_ID, '+
                             '                      :SITUACAO,  '+
                             '                      :CODIGO_CONTRATO, '+
                             '                      :PRODUTOR_ID, '+
                             '                      :LIMITECREDITO_ID) ';

    sqlInsert.Params[0].AsInteger := vID ;
    sqlInsert.Params[1].AsString := oCadNegociacao.Situacao;
    sqlInsert.Params[2].AsInteger := oCadNegociacao.CodigoContrato;
    sqlInsert.Params[3].AsInteger := oCadNegociacao.Produtor_id;
    sqlInsert.Params[4].AsInteger := oCadNegociacao.LimiteCredito_ID;

    try
      sqlInsert.ExecSQL();
      Result := vID;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao inserir Negociação: '+e.Message;
        Result := 0;
      end;
    end;
  finally
    FreeAndNil(sqlInsert);
  end;

end;

function TdtmCadNegociacao.PesquisarSaldoDiponivel(sLimiteCredito_ID: Integer):Double;
begin

end;

end.
