unit uDMLimiteCredito;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Datasnap.DBClient, Data.DB,
  Data.SqlExpr, Datasnap.Provider,Vcl.Grids, uLimiteCreditoModel,
  Winapi.Windows, Winapi.Messages, System.Variants, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons,
  Vcl.ComCtrls, Vcl.ExtCtrls, Vcl.DBGrids, Vcl.DBCtrls;

type
  TdtmLimiteCredito = class(TDataModule)
    dspPesquisar: TDataSetProvider;
    sqlPesquisar: TSQLDataSet;
    cdsPesquisar: TClientDataSet;
    dspDistribuidor: TDataSetProvider;
    sqlDistribuidor: TSQLDataSet;
    cdsDistribuidor: TClientDataSet;
  private
    { Private declarations }
  public
    { Public declarations }
    function GerarID:Integer;
    procedure Pesquisar(sProdutor_ID: Integer; var aStringGrid : TStringGrid);
    procedure CarregarComboboxDistribuidor(cbbDistribuidor: TCombobox);
    function Inserir(oLimiteCredito : TLimiteCredito; out sErro : String):Boolean;
    function Excluir(iCodigo : Integer; out sErro : String):Boolean;
  end;

var
  dtmLimiteCredito: TdtmLimiteCredito;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses DMConexao;

{$R *.dfm}

{ TdtmLimiteCredito }

procedure TdtmLimiteCredito.CarregarComboboxDistribuidor(
  cbbDistribuidor: TCombobox);
var
 FItem : String;
begin
  try
    cdsDistribuidor.Active := False;

    cdsDistribuidor.Params[0].AsString := '%';

    cdsDistribuidor.Open;
    cdsDistribuidor.DisableConstraints;

    //
    cdsPesquisar.First;

    cbbDistribuidor.Clear;

    while not cdsDistribuidor.Eof do
    begin
      cbbDistribuidor.Items.AddObject( Trim(cdsDistribuidor.FieldByName('NOME').AsString),
       tObject(cdsDistribuidor.FieldByName('DISTRIBUIDOR_ID').asInteger) );
      cdsPesquisar.Next;
    end;
  finally
    cdsPesquisar.EnableConstraints;
    cdsPesquisar.Close;
  end;

end;

function TdtmLimiteCredito.Excluir(iCodigo: Integer;
  out sErro: String): Boolean;
var
  sqlDeletar : TSQLDataset;
begin
  sqlDeletar := TSQLDataset.Create(nil);
  try
    sqlDeletar.SQLConnection := dtmConexao.SqlConexao;
    sqlDeletar.CommandText := ' DELETE FROM LIMITECREDITO WHERE LIMITECREDITO_ID = :LIMITECREDITO_ID ';

    sqlDeletar.Params[0].AsInteger := iCodigo;

    try
      sqlDeletar.ExecSQL();
      Result := true;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao excluir limite: '+e.Message;
        Result := false;
      end;
    end;
  finally
    FreeAndNil(sqlDeletar);
  end;

end;

function TdtmLimiteCredito.GerarID: Integer;
var
  sqlSeq : TSQLDataset;
begin
  sqlSeq := TSQLDataset.Create(nil);
  try
    sqlSeq.SQLConnection := dtmConexao.SqlConexao;
    sqlSeq.CommandText := 'SELECT GEN_ID(GEN_LIMCRED, 1) FROM RDB$DATABASE;';
    sqlSeq.Open;
    Result := sqlSeq.FieldByName('GEN_ID').AsInteger;
  finally
    FreeAndNil(sqlSeq);
  end;

end;

function TdtmLimiteCredito.Inserir(oLimiteCredito: TLimiteCredito;
  out sErro: String): Boolean;
var
  sqlInsert : TSQLDataset;
begin
  sqlInsert := TSQLDataset.Create(nil);
  try
    sqlInsert.SQLConnection := dtmConexao.SqlConexao;
    sqlInsert.CommandText := ' INSERT INTO LIMITECREDITO( '+
                             '                      LIMITECREDITO_ID, '+
                             '                      LIMITECREDITO, '+
                             '                      PRODUTOR_ID, '+
                             '                      DISTRIBUIDOR_ID)values( '+
                             '                      :LIMITECREDITO_ID, '+
                             '                      :LIMITECREDITO,  '+
                             '                      :PRODUTOR_ID, '+
                             '                      :DISTRIBUIDOR_ID) ';

    sqlInsert.Params[0].AsInteger := GerarID;
    sqlInsert.Params[1].AsFloat := oLimiteCredito.LimiteCredito;
    sqlInsert.Params[2].AsInteger := oLimiteCredito.Produtor_id;
    sqlInsert.Params[3].AsInteger := oLimiteCredito.Distribuidor_id;

    try
      sqlInsert.ExecSQL();
      Result := true;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao inserir limite: '+e.Message;
        Result := false;
      end;
    end;
  finally
    FreeAndNil(sqlInsert);
  end;

end;

procedure TdtmLimiteCredito.Pesquisar(sProdutor_ID: Integer;
  var aStringGrid: TStringGrid);
var
 iTotal : Integer;
begin
  try
    iTotal := 1;

    cdsPesquisar.Active := False;

    cdsPesquisar.Params[0].AsInteger := sProdutor_ID;

    cdsPesquisar.Open;
    cdsPesquisar.DisableConstraints;
    cdsPesquisar.Last;

    //Configurar colunas StringGrid
    aStringGrid.RowCount := cdsPesquisar.RecordCount+1;
    aStringGrid.ColCount := 3;
    aStringGrid.Cells[0,0] := 'ID';
    aStringGrid.Cells[1,0] := 'Distribuidor';
    aStringGrid.cells[2,0] := 'Limite';
    aStringGrid.ColWidths[0] := 50;
    aStringGrid.ColWidths[1] := 260;
    aStringGrid.ColWidths[2] := 90;

    //Popular linhas StringGrid
    cdsPesquisar.First;
    while not cdsPesquisar.Eof do
    begin
      aStringGrid.Cells[0,iTotal] := cdsPesquisar.FieldByName('LIMITECREDITO_ID').AsString;
      aStringGrid.Cells[1,iTotal] := cdsPesquisar.FieldByName('DISTRIBUIDOR').AsString;
      aStringGrid.Cells[2,iTotal] := cdsPesquisar.FieldByName('LIMITECREDITO').AsString;
      Inc(iTotal);
      cdsPesquisar.Next;
    end;
  finally
    cdsPesquisar.EnableConstraints;
    cdsPesquisar.Close;
  end;

end;

end.
