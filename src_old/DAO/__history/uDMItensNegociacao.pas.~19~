unit uDMItensNegociacao;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Datasnap.DBClient, Data.DB,
  Data.SqlExpr, Datasnap.Provider, uCadItensNegociacaoModel,
  Vcl.ComCtrls, Vcl.ExtCtrls,Vcl.Grids,Vcl.StdCtrls;

type
  TdtmItensNegociacao = class(TDataModule)
    dspPesquisar: TDataSetProvider;
    sqlPesquisar: TSQLDataSet;
    cdsPesquisar: TClientDataSet;
  private
    { Private declarations }
  public
    { Public declarations }
    function GerarID:Integer;
    function Pesquisar(sNegociacao_ID: Integer; var aStringGrid : TStringGrid) :Double;
    function Inserir(oItensNegociacao : TCadItensNegociacao; out sErro : String):Boolean;
    function Excluir(iCodigo : Integer; out sErro : String):Boolean;
  end;

var
  dtmItensNegociacao: TdtmItensNegociacao;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses DMConexao;

{$R *.dfm}

{ TdtmItensNegociacao }


function TdtmItensNegociacao.Excluir(iCodigo: Integer;
  out sErro: String): Boolean;
var
  sqlDeletar : TSQLDataset;
begin
  sqlDeletar := TSQLDataset.Create(nil);
  try
    sqlDeletar.SQLConnection := dtmConexao.SqlConexao;
    sqlDeletar.CommandText := ' DELETE FROM ITENS_NEGOCIACAO WHERE ITENS_NEGOCIACAO_ID = :ITENS_NEGOCIACAO_ID ';

    sqlDeletar.Params[0].AsInteger := iCodigo;

    try
      sqlDeletar.ExecSQL();
      Result := true;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao excluir Item: '+e.Message;
        Result := false;
      end;
    end;
  finally
    FreeAndNil(sqlDeletar);
  end;

end;

function TdtmItensNegociacao.GerarID: Integer;
var
  sqlSeq : TSQLDataset;
begin
  sqlSeq := TSQLDataset.Create(nil);
  try
    sqlSeq.SQLConnection := dtmConexao.SqlConexao;
    sqlSeq.CommandText := 'SELECT GEN_ID(GEN_ITENS_NEGOCI, 1) FROM RDB$DATABASE;';
    sqlSeq.Open;
    Result := sqlSeq.FieldByName('GEN_ID').AsInteger;
  finally
    FreeAndNil(sqlSeq);
  end;

end;

function TdtmItensNegociacao.Inserir(oItensNegociacao: TCadItensNegociacao;
  out sErro: String): Boolean;
var
  sqlInsert : TSQLDataset;
begin
  sqlInsert := TSQLDataset.Create(nil);
  try
    sqlInsert.SQLConnection := dtmConexao.SqlConexao;
    sqlInsert.CommandText := ' INSERT INTO ITENS_NEGOCIACAO( '+
                             '                      ITENS_NEGOCIACAO_ID, '+
                             '                      PRODUTO_ID, '+
                             '                      QUANTIDADE, '+
                             '                      NEGOCIACAO_ID)values( '+
                             '                      :ITENS_NEGOCIACAO_ID, '+
                             '                      :PRODUTO_ID,  '+
                             '                      :QUANTIDADE, '+
                             '                      :NEGOCIACAO_ID) ';

    sqlInsert.Params[0].AsInteger := GerarID;
    sqlInsert.Params[1].AsInteger := oItensNegociacao.Produto_id;
    sqlInsert.Params[2].AsInteger := oItensNegociacao.Quantidade;
    sqlInsert.Params[3].AsInteger := oItensNegociacao.Negociacao_id;

    try
      sqlInsert.ExecSQL();
      Result := true;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao inserir Item: '+e.Message;
        Result := false;
      end;
    end;
  finally
    FreeAndNil(sqlInsert);
  end;

end;

function TdtmItensNegociacao.Pesquisar(sNegociacao_ID: Integer;
  var aStringGrid: TStringGrid):Double;
var
 iTotal : Integer;
 vSum :Double;
begin
  try
    iTotal := 1;
    vSum := 0;

    cdsPesquisar.Active := False;

    cdsPesquisar.Params[0].AsInteger := sNegociacao_ID;

    cdsPesquisar.Open;
    cdsPesquisar.DisableConstraints;
    cdsPesquisar.Last;

    //Configurar colunas StringGrid
    aStringGrid.RowCount := cdsPesquisar.RecordCount+1;
    aStringGrid.ColCount := 3;
    aStringGrid.Cells[0,0] := 'ID';
    aStringGrid.Cells[1,0] := 'Descricao';
    aStringGrid.cells[2,0] := 'Preço';
    aStringGrid.ColWidths[0] := 40;
    aStringGrid.ColWidths[1] := 200;
    aStringGrid.ColWidths[2] := 60;

    //Popular linhas StringGrid
    cdsPesquisar.First;
    while not cdsPesquisar.Eof do
    begin
      aStringGrid.Cells[0,iTotal] := cdsPesquisar.FieldByName('ITENS_NEGOCIACAO_ID').AsString;
      aStringGrid.Cells[1,iTotal] := cdsPesquisar.FieldByName('DESCRICAO').AsString;
      aStringGrid.Cells[2,iTotal] := cdsPesquisar.FieldByName('PRECO').AsString;
      Inc(iTotal);
      vSum := vSum+(cdsPesquisar.FieldByName('PRECO').AsFloat*
                    cdsPesquisar.FieldByName('QUANTIDADE').AsInteger);
      cdsPesquisar.Next;
    end;
    Result := vSum;
  finally
    cdsPesquisar.EnableConstraints;
    cdsPesquisar.Close;
  end;

end;

end.
