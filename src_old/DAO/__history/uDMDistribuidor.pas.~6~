unit uDMDistribuidor;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Datasnap.DBClient, Data.DB,
  Data.SqlExpr, Datasnap.Provider, VCL.Grids, uDistribuidorModel;

type
  TdtmDistribuidor = class(TDataModule)
    dspPesquisar: TDataSetProvider;
    sqlPesquisar: TSQLDataSet;
    cdsPesquisar: TClientDataSet;
  private
    { Private declarations }
  public
    { Public declarations }
    function GerarID:Integer;
    procedure Pesquisar(sNome: string; var aStringGrid : TStringGrid);
    procedure CarregarProdutor(oDistribuidor : TDistribuidor; iCodigo : Integer);
    function Inserir(oDistribuidor : TDistribuidor; out sErro : String):Boolean;
    function Alterar(oDistribuidor : TDistribuidor; out sErro : String):Boolean;
    function Excluir(iCodigo : Integer; out sErro : String):Boolean;
  end;

var
  dtmDistribuidor: TdtmDistribuidor;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses DMConexao;

{$R *.dfm}

{ TdtmDistribuidor }

function TdtmDistribuidor.Alterar(oDistribuidor: TDistribuidor;
  out sErro: String): Boolean;
var
  sqlAlterar : TSQLDataset;
begin
  sqlAlterar := TSQLDataset.Create(nil);
  try
    sqlAlterar.SQLConnection := dtmConexao.SqlConexao;
    sqlAlterar.CommandText := ' UPDATE DISTRIBUIDOR '+
                              ' SET NOME = :NOME, '+
                              ' CNPJ = :CNPJ '+
                              ' WHERE DISTRIBUIDOR_ID = :DISTRIBUIDOR_ID ';

    sqlAlterar.Params[0].AsString := oDistribuidor.Nome;
    sqlAlterar.Params[1].AsString := oDistribuidor.CNPJ;
    sqlAlterar.Params[2].AsInteger := oDistribuidor.id;

    try
      sqlAlterar.ExecSQL();
      Result := true;
    Except
      on e:Exception do
      begin
        sErro := 'Erro ao alterar produtor: '+e.Message;
        Result := false;
      end;
    end;
  finally
    FreeAndNil(sqlAlterar);
  end;

end;

procedure TdtmDistribuidor.CarregarProdutor(oDistribuidor: TDistribuidor;
  iCodigo: Integer);
begin

end;

function TdtmDistribuidor.Excluir(iCodigo: Integer; out sErro: String): Boolean;
begin

end;

function TdtmDistribuidor.GerarID: Integer;
begin

end;

function TdtmDistribuidor.Inserir(oDistribuidor: TDistribuidor;
  out sErro: String): Boolean;
begin

end;

procedure TdtmDistribuidor.Pesquisar(sNome: string;
  var aStringGrid: TStringGrid);
begin

end;

end.
